# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T19:10:06+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class PlayerDto(BaseModel):
    puuid: Optional[str] = Field(
        None, description="This field may be omitted if the player has been anonymized."
    )
    game_name: Optional[str] = Field(
        None,
        alias="gameName",
        description="This field may be omitted if the player has been anonymized.",
    )
    tag_line: Optional[str] = Field(
        None,
        alias="tagLine",
        description="This field may be omitted if the player has been anonymized.",
    )
    leaderboard_rank: int = Field(..., alias="leaderboardRank")
    ranked_rating: int = Field(..., alias="rankedRating")
    number_of_wins: int = Field(..., alias="numberOfWins")


class TierDto(BaseModel):
    pass


class LeaderboardDto(BaseModel):
    act_id: str = Field(
        ...,
        alias="actId",
        description="The act id for the given leaderboard. Act ids can be found using the val-content API.",
    )
    total_players: int = Field(
        ...,
        alias="totalPlayers",
        description="The total number of players in the leaderboard.",
    )
    query: Optional[str] = None
    shard: str = Field(..., description="The shard for the given leaderboard.")
    players: List[PlayerDto]
    tier_details: Optional[List[TierDto]] = Field(None, alias="tierDetails")
