# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T17:03:26+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class RewardConfigDto(BaseModel):
    rewardValue: str = Field(..., description='Reward value')
    rewardType: str = Field(..., description='Reward type')
    maximumReward: int = Field(..., description='Maximun reward')


class NextSeasonMilestonesDto(BaseModel):
    requireGradeCounts: Dict[str, int]
    rewardMarks: int = Field(..., description='Reward marks.')
    bonus: bool = Field(..., description='Bonus.')
    rewardConfig: Optional[RewardConfigDto] = Field(
        None, description='Reward configuration.'
    )
    totalGamesRequires: int


class ChampionMasteryDto(BaseModel):
    puuid: str = Field(
        ...,
        description='Player Universal Unique Identifier. Exact length of 78 characters. (Encrypted)',
    )
    championPointsUntilNextLevel: int = Field(
        ...,
        description='Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.',
    )
    chestGranted: Optional[bool] = Field(
        None, description='Is chest granted for this champion or not in current season.'
    )
    championId: int = Field(..., description='Champion ID for this entry.')
    lastPlayTime: int = Field(
        ...,
        description='Last time this champion was played by this player - in Unix milliseconds time format.',
    )
    championLevel: int = Field(
        ..., description='Champion level for specified player and champion combination.'
    )
    championPoints: int = Field(
        ...,
        description='Total number of champion points for this player and champion combination - they are used to determine championLevel.',
    )
    championPointsSinceLastLevel: int = Field(
        ...,
        description='Number of points earned since current level has been achieved.',
    )
    markRequiredForNextLevel: int
    championSeasonMilestone: int
    nextSeasonMilestone: NextSeasonMilestonesDto
    tokensEarned: int = Field(
        ...,
        description='The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.',
    )
    milestoneGrades: Optional[List[str]] = None
