# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T17:03:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class State(Enum):
    DISABLED = 'DISABLED'
    HIDDEN = 'HIDDEN'
    ENABLED = 'ENABLED'
    ARCHIVED = 'ARCHIVED'


class Tracking(Enum):
    LIFETIME = 'LIFETIME'
    SEASON = 'SEASON'


class ChallengeConfigInfoDto(BaseModel):
    id: int
    localizedNames: Dict[str, Dict[str, str]]
    state: State = Field(
        ...,
        description='DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated',
    )
    tracking: Optional[Tracking] = Field(
        None,
        description='LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season',
    )
    startTimestamp: Optional[int] = None
    endTimestamp: Optional[int] = None
    leaderboard: bool
    thresholds: Dict[str, float]


class StateModel(BaseModel):
    pass


class TrackingModel(BaseModel):
    pass


class ApexPlayerInfoDto(BaseModel):
    puuid: str
    value: float
    position: int


class Level(BaseModel):
    pass


class LevelModel(Enum):
    NONE = 'NONE'
    IRON = 'IRON'
    BRONZE = 'BRONZE'
    SILVER = 'SILVER'
    GOLD = 'GOLD'
    PLATINUM = 'PLATINUM'
    DIAMOND = 'DIAMOND'
    MASTER = 'MASTER'
    GRANDMASTER = 'GRANDMASTER'
    CHALLENGER = 'CHALLENGER'
    HIGHEST_NOT_LEADERBOARD_ONLY = 'HIGHEST_NOT_LEADERBOARD_ONLY'
    HIGHEST = 'HIGHEST'
    LOWEST = 'LOWEST'


class ChallengeInfoDto(BaseModel):
    percentile: float
    playersInLevel: Optional[int] = None
    achievedTime: Optional[int] = None
    value: float
    challengeId: int
    level: LevelModel = Field(
        ...,
        description='(Legal values:  NONE,  IRON,  BRONZE,  SILVER,  GOLD,  PLATINUM,  DIAMOND,  MASTER,  GRANDMASTER,  CHALLENGER,  HIGHEST_NOT_LEADERBOARD_ONLY,  HIGHEST,  LOWEST)',
    )
    position: Optional[int] = None


class PlayerClientPreferencesDto(BaseModel):
    bannerAccent: Optional[str] = None
    title: Optional[str] = None
    challengeIds: Optional[List[int]] = None
    crestBorder: Optional[str] = None
    prestigeCrestBorderLevel: Optional[int] = None


class ChallengePointDto(BaseModel):
    level: str
    current: int
    max: int
    percentile: Optional[float] = None


class PlayerInfoDto(BaseModel):
    challenges: List[ChallengeInfoDto]
    preferences: PlayerClientPreferencesDto
    totalPoints: ChallengePointDto
    categoryPoints: Dict[str, ChallengePointDto]
