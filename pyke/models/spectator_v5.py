# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T17:03:26+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class BannedChampion(BaseModel):
    pickTurn: int = Field(
        ..., description='The turn during which the champion was banned'
    )
    championId: int = Field(..., description='The ID of the banned champion')
    teamId: int = Field(..., description='The ID of the team that banned the champion')


class Observer(BaseModel):
    encryptionKey: str = Field(
        ..., description='Key used to decrypt the spectator grid game data for playback'
    )


class Perks(BaseModel):
    perkIds: List[int] = Field(..., description='IDs of the perks/runes assigned.')
    perkStyle: int = Field(..., description='Primary runes path')
    perkSubStyle: int = Field(..., description='Secondary runes path')


class GameCustomizationObject(BaseModel):
    category: str = Field(..., description='Category identifier for Game Customization')
    content: str = Field(..., description='Game Customization content')


class GameMode(Enum):
    CLASSIC = 'CLASSIC'
    ODIN = 'ODIN'
    ARAM = 'ARAM'
    TUTORIAL = 'TUTORIAL'
    ONEFORALL = 'ONEFORALL'
    ASCENSION = 'ASCENSION'
    FIRSTBLOOD = 'FIRSTBLOOD'
    KINGPORO = 'KINGPORO'


class GameType(Enum):
    CUSTOM_GAME = 'CUSTOM_GAME'
    MATCHED_GAME = 'MATCHED_GAME'
    TUTORIAL_GAME = 'TUTORIAL_GAME'


class Participant(BaseModel):
    bot: bool = Field(
        ..., description='Flag indicating whether or not this participant is a bot'
    )
    spell2Id: int = Field(
        ..., description='The ID of the second summoner spell used by this participant'
    )
    profileIconId: int = Field(
        ..., description='The ID of the profile icon used by this participant'
    )
    puuid: Optional[str] = Field(
        None, description='Encrypted puuid of this participant'
    )
    championId: int = Field(
        ..., description='The ID of the champion played by this participant'
    )
    teamId: int = Field(
        ...,
        description="The team ID of this participant, indicating the participant's team",
    )
    spell1Id: int = Field(
        ..., description='The ID of the first summoner spell used by this participant'
    )
    riotId: Optional[str] = None


class CurrentGameParticipant(BaseModel):
    championId: int = Field(
        ..., description='The ID of the champion played by this participant'
    )
    perks: Optional[Perks] = Field(None, description='Perks/Runes Reforged Information')
    profileIconId: int = Field(
        ..., description='The ID of the profile icon used by this participant'
    )
    bot: bool = Field(
        ..., description='Flag indicating whether or not this participant is a bot'
    )
    teamId: int = Field(
        ...,
        description="The team ID of this participant, indicating the participant's team",
    )
    puuid: Optional[str] = Field(
        None, description='The encrypted puuid of this participant'
    )
    spell1Id: int = Field(
        ..., description='The ID of the first summoner spell used by this participant'
    )
    spell2Id: int = Field(
        ..., description='The ID of the second summoner spell used by this participant'
    )
    gameCustomizationObjects: List[GameCustomizationObject] = Field(
        ..., description='List of Game Customizations'
    )
    riotId: Optional[str] = None


class FeaturedGameInfo(BaseModel):
    gameMode: GameMode = Field(
        ...,
        description='The game mode\n             (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)',
    )
    gameLength: int = Field(
        ...,
        description='The amount of time in seconds that has passed since the game started',
    )
    mapId: int = Field(..., description='The ID of the map')
    gameType: GameType = Field(
        ...,
        description='The game type\n             (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)',
    )
    bannedChampions: List[BannedChampion] = Field(
        ..., description='Banned champion information'
    )
    gameId: int = Field(..., description='The ID of the game')
    observers: Observer = Field(..., description='The observer information')
    gameQueueConfigId: int = Field(
        ...,
        description='The queue type (queue types are documented on the Game Constants page)',
    )
    participants: List[Participant] = Field(
        ..., description='The participant information'
    )
    platformId: str = Field(
        ..., description='The ID of the platform on which the game is being played'
    )


class CurrentGameInfo(BaseModel):
    gameId: int = Field(..., description='The ID of the game')
    gameType: str = Field(..., description='The game type')
    gameStartTime: int = Field(
        ..., description='The game start time represented in epoch milliseconds'
    )
    mapId: int = Field(..., description='The ID of the map')
    gameLength: int = Field(
        ...,
        description='The amount of time in seconds that has passed since the game started',
    )
    platformId: str = Field(
        ..., description='The ID of the platform on which the game is being played'
    )
    gameMode: str = Field(..., description='The game mode')
    bannedChampions: List[BannedChampion] = Field(
        ..., description='Banned champion information'
    )
    gameQueueConfigId: Optional[int] = Field(
        None,
        description='The queue type (queue types are documented on the Game Constants page)',
    )
    observers: Observer = Field(..., description='The observer information')
    participants: List[CurrentGameParticipant] = Field(
        ..., description='The participant information'
    )


class FeaturedGames(BaseModel):
    gameList: List[FeaturedGameInfo] = Field(
        ..., description='The list of featured games'
    )
    clientRefreshInterval: Optional[int] = Field(
        None,
        description='The suggested interval to wait before requesting FeaturedGames again',
    )
