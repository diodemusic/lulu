# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T19:10:06+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class MatchInfoDto(BaseModel):
    match_id: str = Field(..., alias='matchId')
    map_id: str = Field(..., alias='mapId')
    game_length_millis: Optional[int] = Field(None, alias='gameLengthMillis')
    game_start_millis: int = Field(..., alias='gameStartMillis')
    provisioning_flow_id: str = Field(..., alias='provisioningFlowId')
    is_completed: bool = Field(..., alias='isCompleted')
    custom_game_name: str = Field(..., alias='customGameName')
    queue_id: str = Field(..., alias='queueId')
    game_mode: str = Field(..., alias='gameMode')
    is_ranked: bool = Field(..., alias='isRanked')
    season_id: str = Field(..., alias='seasonId')


class AbilityCastsDto(BaseModel):
    grenade_casts: int = Field(..., alias='grenadeCasts')
    ability1_casts: int = Field(..., alias='ability1Casts')
    ability2_casts: int = Field(..., alias='ability2Casts')
    ultimate_casts: int = Field(..., alias='ultimateCasts')


class CoachDto(BaseModel):
    puuid: str
    team_id: str = Field(..., alias='teamId')


class TeamDto(BaseModel):
    team_id: str = Field(
        ...,
        alias='teamId',
        description='This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch.',
    )
    won: bool
    rounds_played: int = Field(..., alias='roundsPlayed')
    rounds_won: int = Field(..., alias='roundsWon')
    num_points: int = Field(
        ...,
        alias='numPoints',
        description='Team points scored. Number of kills in deathmatch.',
    )


class LocationDto(BaseModel):
    x: int
    y: int


class FinishingDamageDto(BaseModel):
    damage_type: str = Field(..., alias='damageType')
    damage_item: str = Field(..., alias='damageItem')
    is_secondary_fire_mode: bool = Field(..., alias='isSecondaryFireMode')


class DamageDto(BaseModel):
    receiver: str = Field(..., description='PUUID')
    damage: int
    legshots: int
    bodyshots: int
    headshots: int


class EconomyDto(BaseModel):
    loadout_value: int = Field(..., alias='loadoutValue')
    weapon: str
    armor: str
    remaining: int
    spent: int


class AbilityDto(BaseModel):
    grenade_effects: Optional[str] = Field(None, alias='grenadeEffects')
    ability1_effects: Optional[str] = Field(None, alias='ability1Effects')
    ability2_effects: Optional[str] = Field(None, alias='ability2Effects')
    ultimate_effects: Optional[str] = Field(None, alias='ultimateEffects')


class MatchlistEntryDto(BaseModel):
    match_id: str = Field(..., alias='matchId')
    game_start_time_millis: int = Field(..., alias='gameStartTimeMillis')
    queue_id: str = Field(..., alias='queueId')


class RecentMatchesDto(BaseModel):
    current_time: int = Field(..., alias='currentTime')
    match_ids: List[str] = Field(
        ..., alias='matchIds', description='A list of recent match ids.'
    )


class PlayerStatsDto(BaseModel):
    score: int
    rounds_played: int = Field(..., alias='roundsPlayed')
    kills: int
    deaths: int
    assists: int
    playtime_millis: int = Field(..., alias='playtimeMillis')
    ability_casts: Optional[AbilityCastsDto] = Field(None, alias='abilityCasts')


class PlayerLocationsDto(BaseModel):
    puuid: str
    view_radians: float = Field(..., alias='viewRadians')
    location: LocationDto


class KillDto(BaseModel):
    time_since_game_start_millis: int = Field(..., alias='timeSinceGameStartMillis')
    time_since_round_start_millis: int = Field(..., alias='timeSinceRoundStartMillis')
    killer: str = Field(..., description='PUUID')
    victim: str = Field(..., description='PUUID')
    victim_location: LocationDto = Field(..., alias='victimLocation')
    assistants: List[str] = Field(..., description='List of PUUIDs')
    player_locations: List[PlayerLocationsDto] = Field(..., alias='playerLocations')
    finishing_damage: FinishingDamageDto = Field(..., alias='finishingDamage')


class MatchlistDto(BaseModel):
    puuid: str
    history: List[MatchlistEntryDto]


class PlayerDto(BaseModel):
    puuid: str
    game_name: str = Field(..., alias='gameName')
    tag_line: str = Field(..., alias='tagLine')
    team_id: str = Field(..., alias='teamId')
    party_id: str = Field(..., alias='partyId')
    character_id: Optional[str] = Field(None, alias='characterId')
    stats: Optional[PlayerStatsDto] = None
    competitive_tier: int = Field(..., alias='competitiveTier')
    player_card: str = Field(..., alias='playerCard')
    player_title: str = Field(..., alias='playerTitle')


class PlayerRoundStatsDto(BaseModel):
    puuid: str
    kills: List[KillDto]
    damage: List[DamageDto]
    score: int
    economy: EconomyDto
    ability: AbilityDto


class RoundResultDto(BaseModel):
    round_num: int = Field(..., alias='roundNum')
    round_result: str = Field(..., alias='roundResult')
    round_ceremony: str = Field(..., alias='roundCeremony')
    winning_team: str = Field(..., alias='winningTeam')
    bomb_planter: Optional[str] = Field(
        None, alias='bombPlanter', description='PUUID of player'
    )
    bomb_defuser: Optional[str] = Field(
        None, alias='bombDefuser', description='PUUID of player'
    )
    plant_round_time: int = Field(..., alias='plantRoundTime')
    plant_player_locations: Optional[List[PlayerLocationsDto]] = Field(
        None, alias='plantPlayerLocations'
    )
    plant_location: LocationDto = Field(..., alias='plantLocation')
    plant_site: str = Field(..., alias='plantSite')
    defuse_round_time: int = Field(..., alias='defuseRoundTime')
    defuse_player_locations: Optional[List[PlayerLocationsDto]] = Field(
        None, alias='defusePlayerLocations'
    )
    defuse_location: LocationDto = Field(..., alias='defuseLocation')
    player_stats: List[PlayerRoundStatsDto] = Field(..., alias='playerStats')
    round_result_code: str = Field(..., alias='roundResultCode')


class MatchDto(BaseModel):
    match_info: MatchInfoDto = Field(..., alias='matchInfo')
    players: List[PlayerDto]
    coaches: List[CoachDto]
    teams: Optional[List[TeamDto]] = None
    round_results: Optional[List[RoundResultDto]] = Field(None, alias='roundResults')
