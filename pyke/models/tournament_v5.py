# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T17:03:26+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, conint


class PickType(Enum):
    BLIND_PICK = 'BLIND_PICK'
    DRAFT_MODE = 'DRAFT_MODE'
    ALL_RANDOM = 'ALL_RANDOM'
    TOURNAMENT_DRAFT = 'TOURNAMENT_DRAFT'


class MapType(Enum):
    SUMMONERS_RIFT = 'SUMMONERS_RIFT'
    HOWLING_ABYSS = 'HOWLING_ABYSS'


class SpectatorType(Enum):
    NONE = 'NONE'
    LOBBYONLY = 'LOBBYONLY'
    ALL = 'ALL'


class TournamentCodeParametersV5(BaseModel):
    allowedParticipants: Optional[List[str]] = Field(
        None,
        description='Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.',
    )
    metadata: Optional[str] = Field(
        None,
        description='Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.',
    )
    teamSize: conint(ge=1, le=5) = Field(
        ..., description='The team size of the game. Valid values are 1-5.'
    )
    pickType: PickType = Field(
        ...,
        description='The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)',
    )
    mapType: MapType = Field(
        ...,
        description='The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)',
    )
    spectatorType: SpectatorType = Field(
        ...,
        description='The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)',
    )
    enoughPlayers: bool = Field(
        ..., description='Checks if allowed participants are enough to make full teams.'
    )


class Region(Enum):
    BR = 'BR'
    EUNE = 'EUNE'
    EUW = 'EUW'
    JP = 'JP'
    LAN = 'LAN'
    LAS = 'LAS'
    NA = 'NA'
    OCE = 'OCE'
    PBE = 'PBE'
    RU = 'RU'
    TR = 'TR'
    KR = 'KR'
    PH = 'PH'
    SG = 'SG'
    TH = 'TH'
    TW = 'TW'
    VN = 'VN'


class TournamentCodeV5DTO(BaseModel):
    id: int = Field(..., description="The tournament code's ID.")
    providerId: int = Field(..., description="The provider's ID.")
    tournamentId: int = Field(..., description="The tournament's ID.")
    code: str = Field(..., description='The tournament code.')
    region: Region = Field(
        ...,
        description="The tournament code's region.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN)",
    )
    map: str = Field(..., description='The game map for the tournament code game')
    teamSize: int = Field(
        ..., description='The team size for the tournament code game.'
    )
    spectators: str = Field(
        ..., description='The spectator mode for the tournament code game.'
    )
    pickType: str = Field(..., description='The pick mode for tournament code game.')
    lobbyName: str = Field(
        ..., description='The lobby name for the tournament code game.'
    )
    password: str = Field(..., description='The password for the tournament code game.')
    metaData: str = Field(..., description='The metadata for tournament code.')
    participants: List[str] = Field(
        ..., description='The puuids of the participants (Encrypted)'
    )


class TournamentCodeUpdateParametersV5(BaseModel):
    allowedParticipants: Optional[List[str]] = Field(
        None,
        description='Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.',
    )
    pickType: PickType = Field(
        ...,
        description='The pick type\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)',
    )
    mapType: MapType = Field(
        ...,
        description='The map type\n             (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)',
    )
    spectatorType: SpectatorType = Field(
        ...,
        description='The spectator type\n             (Legal values:  NONE,  LOBBYONLY,  ALL)',
    )


class TournamentTeamV5(BaseModel):
    puuid: str = Field(..., description='Player Unique UUID (Encrypted)')


class LobbyEventV5DTO(BaseModel):
    timestamp: str = Field(..., description='Timestamp from the event')
    eventType: str = Field(..., description='The type of event that was triggered')
    puuid: str = Field(
        ..., description='The puuid that triggered the event (Encrypted)'
    )


class ProviderRegistrationParametersV5(BaseModel):
    region: Region = Field(
        ...,
        description='The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN)',
    )
    url: str = Field(
        ...,
        description="The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).",
    )


class TournamentRegistrationParametersV5(BaseModel):
    providerId: int = Field(
        ...,
        description='The provider ID to specify the regional registered provider data to associate this tournament.',
    )
    name: Optional[str] = Field(
        None, description='The optional name of the tournament.'
    )


class TournamentGamesV5(BaseModel):
    startTime: int
    winningTeam: List[TournamentTeamV5]
    losingTeam: List[TournamentTeamV5]
    shortCode: str = Field(..., description='Tournament Code')
    metaData: Optional[str] = Field(None, description='Metadata for the TournamentCode')
    gameId: int
    gameName: str
    gameType: str
    gameMap: int = Field(..., description='Game Map ID')
    gameMode: str
    region: str = Field(..., description='Region of the game')


class LobbyEventV5DTOWrapper(BaseModel):
    eventList: List[LobbyEventV5DTO]
