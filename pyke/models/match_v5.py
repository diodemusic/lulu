# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-10-09T17:03:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class MetadataDto(BaseModel):
    dataVersion: str = Field(..., description='Match data version.')
    matchId: str = Field(..., description='Match id.')
    participants: List[str] = Field(..., description='A list of participant PUUIDs.')


class FasterSupportQuestCompletion(Enum):
    integer_0 = 0
    integer_1 = 1


class HadAfkTeammate(Enum):
    integer_0 = 0
    integer_1 = 1


class HighestCrowdControlScore(Enum):
    integer_0 = 0
    integer_1 = 1


class HighestWardKills(Enum):
    integer_0 = 0
    integer_1 = 1


class LaningPhaseGoldExpAdvantage(Enum):
    integer_0 = 0
    integer_1 = 1


class PlayedChampSelectPosition(Enum):
    integer_0 = 0
    integer_1 = 1


class ChallengesDto(BaseModel):
    field_12AssistStreakCount: Optional[int] = Field(None, alias='12AssistStreakCount')
    baronBuffGoldAdvantageOverThreshold: Optional[int] = None
    controlWardTimeCoverageInRiverOrEnemyHalf: Optional[float] = None
    earliestBaron: Optional[float] = None
    earliestDragonTakedown: Optional[float] = None
    earliestElderDragon: Optional[float] = None
    earlyLaningPhaseGoldExpAdvantage: Optional[float] = None
    fasterSupportQuestCompletion: Optional[FasterSupportQuestCompletion] = None
    fastestLegendary: Optional[float] = None
    hadAfkTeammate: Optional[HadAfkTeammate] = None
    highestChampionDamage: Optional[int] = None
    highestCrowdControlScore: Optional[HighestCrowdControlScore] = None
    highestWardKills: Optional[HighestWardKills] = None
    junglerKillsEarlyJungle: Optional[int] = None
    killsOnLanersEarlyJungleAsJungler: Optional[int] = None
    laningPhaseGoldExpAdvantage: Optional[LaningPhaseGoldExpAdvantage] = None
    legendaryCount: Optional[int] = None
    maxCsAdvantageOnLaneOpponent: Optional[float] = None
    maxLevelLeadLaneOpponent: Optional[int] = None
    mostWardsDestroyedOneSweeper: Optional[int] = None
    mythicItemUsed: Optional[int] = None
    playedChampSelectPosition: Optional[PlayedChampSelectPosition] = None
    soloTurretsLategame: Optional[int] = None
    takedownsFirst25Minutes: Optional[int] = None
    teleportTakedowns: Optional[int] = None
    thirdInhibitorDestroyedTime: Optional[float] = None
    threeWardsOneSweeperCount: Optional[int] = None
    visionScoreAdvantageLaneOpponent: Optional[float] = None
    InfernalScalePickup: Optional[int] = None
    fistBumpParticipation: Optional[int] = None
    voidMonsterKill: Optional[int] = None
    abilityUses: Optional[int] = None
    acesBefore15Minutes: Optional[int] = None
    alliedJungleMonsterKills: Optional[float] = None
    baronTakedowns: Optional[int] = None
    blastConeOppositeOpponentCount: Optional[int] = None
    bountyGold: Optional[float] = None
    buffsStolen: Optional[int] = None
    completeSupportQuestInTime: Optional[int] = None
    controlWardsPlaced: Optional[int] = None
    damagePerMinute: Optional[float] = None
    damageTakenOnTeamPercentage: Optional[float] = None
    dancedWithRiftHerald: Optional[int] = None
    deathsByEnemyChamps: Optional[int] = None
    dodgeSkillShotsSmallWindow: Optional[int] = None
    doubleAces: Optional[int] = None
    dragonTakedowns: Optional[int] = None
    legendaryItemUsed: Optional[List[int]] = None
    effectiveHealAndShielding: Optional[float] = None
    elderDragonKillsWithOpposingSoul: Optional[int] = None
    elderDragonMultikills: Optional[int] = None
    enemyChampionImmobilizations: Optional[int] = None
    enemyJungleMonsterKills: Optional[float] = None
    epicMonsterKillsNearEnemyJungler: Optional[int] = None
    epicMonsterKillsWithin30SecondsOfSpawn: Optional[int] = None
    epicMonsterSteals: Optional[int] = None
    epicMonsterStolenWithoutSmite: Optional[int] = None
    firstTurretKilled: Optional[float] = None
    firstTurretKilledTime: Optional[float] = None
    flawlessAces: Optional[int] = None
    fullTeamTakedown: Optional[int] = None
    gameLength: Optional[float] = None
    getTakedownsInAllLanesEarlyJungleAsLaner: Optional[int] = None
    goldPerMinute: Optional[float] = None
    hadOpenNexus: Optional[int] = None
    immobilizeAndKillWithAlly: Optional[int] = None
    initialBuffCount: Optional[int] = None
    initialCrabCount: Optional[int] = None
    jungleCsBefore10Minutes: Optional[float] = None
    junglerTakedownsNearDamagedEpicMonster: Optional[int] = None
    kda: Optional[float] = None
    killAfterHiddenWithAlly: Optional[int] = None
    killedChampTookFullTeamDamageSurvived: Optional[int] = None
    killingSprees: Optional[int] = None
    killParticipation: Optional[float] = None
    killsNearEnemyTurret: Optional[int] = None
    killsOnOtherLanesEarlyJungleAsLaner: Optional[int] = None
    killsOnRecentlyHealedByAramPack: Optional[int] = None
    killsUnderOwnTurret: Optional[int] = None
    killsWithHelpFromEpicMonster: Optional[int] = None
    knockEnemyIntoTeamAndKill: Optional[int] = None
    kTurretsDestroyedBeforePlatesFall: Optional[int] = None
    landSkillShotsEarlyGame: Optional[int] = None
    laneMinionsFirst10Minutes: Optional[int] = None
    lostAnInhibitor: Optional[int] = None
    maxKillDeficit: Optional[int] = None
    mejaisFullStackInTime: Optional[int] = None
    moreEnemyJungleThanOpponent: Optional[float] = None
    multiKillOneSpell: Optional[int] = Field(
        None,
        description="This is an offshoot of the OneStone challenge. The code checks if a spell with the same instance ID does the final point of damage to at least 2 Champions. It doesn't matter if they're enemies, but you cannot hurt your friends.",
    )
    multikills: Optional[int] = None
    multikillsAfterAggressiveFlash: Optional[int] = None
    multiTurretRiftHeraldCount: Optional[int] = None
    outerTurretExecutesBefore10Minutes: Optional[int] = None
    outnumberedKills: Optional[int] = None
    outnumberedNexusKill: Optional[int] = None
    perfectDragonSoulsTaken: Optional[int] = None
    perfectGame: Optional[int] = None
    pickKillWithAlly: Optional[int] = None
    poroExplosions: Optional[int] = None
    quickCleanse: Optional[int] = None
    quickFirstTurret: Optional[int] = None
    quickSoloKills: Optional[int] = None
    riftHeraldTakedowns: Optional[int] = None
    saveAllyFromDeath: Optional[int] = None
    scuttleCrabKills: Optional[int] = None
    shortestTimeToAceFromFirstTakedown: Optional[float] = None
    skillshotsDodged: Optional[int] = None
    skillshotsHit: Optional[int] = None
    snowballsHit: Optional[int] = None
    soloBaronKills: Optional[int] = None
    SWARM_DefeatAatrox: Optional[int] = None
    SWARM_DefeatBriar: Optional[int] = None
    SWARM_DefeatMiniBosses: Optional[int] = None
    SWARM_EvolveWeapon: Optional[int] = None
    SWARM_Have3Passives: Optional[int] = None
    SWARM_KillEnemy: Optional[int] = None
    SWARM_PickupGold: Optional[float] = None
    SWARM_ReachLevel50: Optional[int] = None
    SWARM_Survive15Min: Optional[int] = None
    SWARM_WinWith5EvolvedWeapons: Optional[int] = None
    soloKills: Optional[int] = None
    stealthWardsPlaced: Optional[int] = None
    survivedSingleDigitHpCount: Optional[int] = None
    survivedThreeImmobilizesInFight: Optional[int] = None
    takedownOnFirstTurret: Optional[int] = None
    takedowns: Optional[int] = None
    takedownsAfterGainingLevelAdvantage: Optional[int] = None
    takedownsBeforeJungleMinionSpawn: Optional[int] = None
    takedownsFirstXMinutes: Optional[int] = None
    takedownsInAlcove: Optional[int] = None
    takedownsInEnemyFountain: Optional[int] = None
    teamBaronKills: Optional[int] = None
    teamDamagePercentage: Optional[float] = None
    teamElderDragonKills: Optional[int] = None
    teamRiftHeraldKills: Optional[int] = None
    tookLargeDamageSurvived: Optional[int] = None
    turretPlatesTaken: Optional[int] = None
    turretsTakenWithRiftHerald: Optional[int] = Field(
        None,
        description='Any player who damages a tower that is destroyed within 30 seconds of a Rift Herald charge will receive credit. A player who does not damage the tower will not receive credit.',
    )
    turretTakedowns: Optional[int] = None
    twentyMinionsIn3SecondsCount: Optional[int] = None
    twoWardsOneSweeperCount: Optional[int] = None
    unseenRecalls: Optional[int] = None
    visionScorePerMinute: Optional[float] = None
    wardsGuarded: Optional[int] = None
    wardTakedowns: Optional[int] = None
    wardTakedownsBefore20M: Optional[int] = None
    HealFromMapSources: Optional[float] = None


class MissionsDto(BaseModel):
    playerScore0: Optional[float] = None
    playerScore1: Optional[float] = None
    playerScore2: Optional[float] = None
    playerScore3: Optional[float] = None
    playerScore4: Optional[float] = None
    playerScore5: Optional[float] = None
    playerScore6: Optional[float] = None
    playerScore7: Optional[float] = None
    playerScore8: Optional[float] = None
    playerScore9: Optional[float] = None
    playerScore10: Optional[float] = None
    playerScore11: Optional[float] = None


class PerkStatsDto(BaseModel):
    defense: int
    flex: int
    offense: int


class PerkStyleSelectionDto(BaseModel):
    perk: int
    var1: int
    var2: int
    var3: int


class BanDto(BaseModel):
    championId: int
    pickTurn: int


class ObjectiveDto(BaseModel):
    first: bool
    kills: int


class MetadataTimeLineDto(BaseModel):
    dataVersion: str = Field(..., description='Match data version.')
    matchId: str = Field(..., description='Match id.')
    participants: List[str] = Field(..., description='A list of participant PUUIDs.')


class ParticipantTimeLineDto(BaseModel):
    participantId: int
    puuid: str


class ChampionStatsDto(BaseModel):
    abilityHaste: Optional[int] = None
    abilityPower: int
    armor: int
    armorPen: int
    armorPenPercent: int
    attackDamage: int
    attackSpeed: int
    bonusArmorPenPercent: int
    bonusMagicPenPercent: int
    ccReduction: int
    cooldownReduction: int
    health: int
    healthMax: int
    healthRegen: int
    lifesteal: int
    magicPen: int
    magicPenPercent: int
    magicResist: int
    movementSpeed: int
    omnivamp: Optional[int] = None
    physicalVamp: Optional[int] = None
    power: int
    powerMax: int
    powerRegen: int
    spellVamp: int


class DamageStatsDto(BaseModel):
    magicDamageDone: int
    magicDamageDoneToChampions: int
    magicDamageTaken: int
    physicalDamageDone: int
    physicalDamageDoneToChampions: int
    physicalDamageTaken: int
    totalDamageDone: int
    totalDamageDoneToChampions: int
    totalDamageTaken: int
    trueDamageDone: int
    trueDamageDoneToChampions: int
    trueDamageTaken: int


class PositionDto(BaseModel):
    x: int
    y: int


class MatchTimelineVictimDamage(BaseModel):
    basic: bool
    magicDamage: int
    name: str
    participantId: int
    physicalDamage: int
    spellName: str
    spellSlot: int
    trueDamage: int
    type: str


class FeatDto(BaseModel):
    featState: Optional[int] = None


class PerkStyleDto(BaseModel):
    description: str
    selections: List[PerkStyleSelectionDto]
    style: int


class ObjectivesDto(BaseModel):
    baron: ObjectiveDto
    champion: ObjectiveDto
    dragon: ObjectiveDto
    horde: Optional[ObjectiveDto] = None
    inhibitor: ObjectiveDto
    riftHerald: ObjectiveDto
    tower: ObjectiveDto
    atakhan: Optional[ObjectiveDto] = None


class EventsTimeLineDto(BaseModel):
    timestamp: int
    realTimestamp: Optional[int] = None
    type: str
    itemId: Optional[int] = None
    participantId: Optional[int] = None
    levelUpType: Optional[str] = None
    skillSlot: Optional[int] = None
    creatorId: Optional[int] = None
    wardType: Optional[str] = None
    level: Optional[int] = None
    assistingParticipantIds: Optional[List[int]] = None
    bounty: Optional[int] = None
    killStreakLength: Optional[int] = None
    killerId: Optional[int] = None
    position: Optional[PositionDto] = None
    victimDamageDealt: Optional[List[MatchTimelineVictimDamage]] = None
    victimDamageReceived: Optional[List[MatchTimelineVictimDamage]] = None
    victimId: Optional[int] = None
    killType: Optional[str] = None
    laneType: Optional[str] = None
    teamId: Optional[int] = None
    multiKillLength: Optional[int] = None
    killerTeamId: Optional[int] = None
    monsterType: Optional[str] = None
    monsterSubType: Optional[str] = None
    buildingType: Optional[str] = None
    towerType: Optional[str] = None
    afterId: Optional[int] = None
    beforeId: Optional[int] = None
    goldGain: Optional[int] = None
    gameId: Optional[int] = None
    winningTeam: Optional[int] = None
    transformType: Optional[str] = None
    name: Optional[str] = None
    shutdownBounty: Optional[int] = None
    actualStartTime: Optional[int] = None
    featType: Optional[int] = None
    featValue: Optional[int] = None


class ParticipantFrameDto(BaseModel):
    championStats: ChampionStatsDto
    currentGold: int
    damageStats: DamageStatsDto
    goldPerSecond: int
    jungleMinionsKilled: int
    level: int
    minionsKilled: int
    participantId: int
    position: PositionDto
    timeEnemySpentControlled: int
    totalGold: int
    xp: int


class FeatsDto(BaseModel):
    EPIC_MONSTER_KILL: Optional[FeatDto] = None
    FIRST_BLOOD: Optional[FeatDto] = None
    FIRST_TURRET: Optional[FeatDto] = None


class PerksDto(BaseModel):
    statPerks: PerkStatsDto
    styles: List[PerkStyleDto]


class TeamDto(BaseModel):
    bans: List[BanDto]
    objectives: ObjectivesDto
    teamId: int
    win: bool
    feats: Optional[FeatsDto] = None


class FramesTimeLineDto(BaseModel):
    events: List[EventsTimeLineDto]
    participantFrames: Optional[Dict[str, ParticipantFrameDto]] = None
    timestamp: int


class ParticipantFramesDto(BaseModel):
    field_1_9: ParticipantFrameDto = Field(
        ..., alias='1-9', description='Key value mapping for each participant'
    )


class ParticipantDto(BaseModel):
    allInPings: Optional[int] = Field(None, description='Yellow crossed swords')
    assistMePings: Optional[int] = Field(None, description='Green flag')
    assists: int
    baronKills: int
    bountyLevel: Optional[int] = None
    champExperience: int
    champLevel: int
    championId: int = Field(
        ...,
        description='Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4.',
    )
    championName: str
    commandPings: Optional[int] = Field(
        None, description='Blue generic ping (ALT+click)'
    )
    championTransform: int = Field(
        ...,
        description="This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)",
    )
    consumablesPurchased: int
    challenges: Optional[ChallengesDto] = None
    damageDealtToBuildings: Optional[int] = None
    damageDealtToObjectives: int
    damageDealtToTurrets: int
    damageSelfMitigated: int
    deaths: int
    detectorWardsPlaced: int
    doubleKills: int
    dragonKills: int
    eligibleForProgression: Optional[bool] = None
    enemyMissingPings: Optional[int] = Field(None, description='Yellow questionmark')
    enemyVisionPings: Optional[int] = Field(None, description='Red eyeball')
    firstBloodAssist: bool
    firstBloodKill: bool
    firstTowerAssist: bool
    firstTowerKill: bool
    gameEndedInEarlySurrender: bool = Field(
        ...,
        description="This is an offshoot of the OneStone challenge. The code checks if a spell with the same instance ID does the final point of damage to at least 2 Champions. It doesn't matter if they're enemies, but you cannot hurt your friends.",
    )
    gameEndedInSurrender: bool
    holdPings: Optional[int] = None
    getBackPings: Optional[int] = Field(
        None, description='Yellow circle with horizontal line'
    )
    goldEarned: int
    goldSpent: int
    individualPosition: str = Field(
        ...,
        description='Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.',
    )
    inhibitorKills: int
    inhibitorTakedowns: Optional[int] = None
    inhibitorsLost: Optional[int] = None
    item0: int
    item1: int
    item2: int
    item3: int
    item4: int
    item5: int
    item6: int
    itemsPurchased: int
    killingSprees: int
    kills: int
    lane: str
    largestCriticalStrike: int
    largestKillingSpree: int
    largestMultiKill: int
    longestTimeSpentLiving: int
    magicDamageDealt: int
    magicDamageDealtToChampions: int
    magicDamageTaken: int
    missions: Optional[MissionsDto] = None
    neutralMinionsKilled: int = Field(
        ...,
        description='neutralMinionsKilled = mNeutralMinionsKilled, which is incremented on kills of kPet and kJungleMonster',
    )
    needVisionPings: Optional[int] = Field(None, description='Green ward')
    nexusKills: int
    nexusTakedowns: Optional[int] = None
    nexusLost: Optional[int] = None
    objectivesStolen: int
    objectivesStolenAssists: int
    onMyWayPings: Optional[int] = Field(
        None, description='Blue arrow pointing at ground'
    )
    participantId: int
    playerScore0: Optional[float] = None
    playerScore1: Optional[float] = None
    playerScore2: Optional[float] = None
    playerScore3: Optional[float] = None
    playerScore4: Optional[float] = None
    playerScore5: Optional[float] = None
    playerScore6: Optional[float] = None
    playerScore7: Optional[float] = None
    playerScore8: Optional[float] = None
    playerScore9: Optional[float] = None
    playerScore10: Optional[float] = None
    playerScore11: Optional[float] = None
    pentaKills: int
    perks: PerksDto
    physicalDamageDealt: int
    physicalDamageDealtToChampions: int
    physicalDamageTaken: int
    placement: Optional[int] = None
    playerAugment1: Optional[int] = None
    playerAugment2: Optional[int] = None
    playerAugment3: Optional[int] = None
    playerAugment4: Optional[int] = None
    playerSubteamId: Optional[int] = None
    pushPings: Optional[int] = Field(None, description='Green minion')
    profileIcon: int
    puuid: str
    quadraKills: int
    riotIdGameName: Optional[str] = None
    riotIdTagline: Optional[str] = None
    role: str
    sightWardsBoughtInGame: int
    spell1Casts: int
    spell2Casts: int
    spell3Casts: int
    spell4Casts: int
    subteamPlacement: Optional[int] = None
    summoner1Casts: int
    summoner1Id: int
    summoner2Casts: int
    summoner2Id: int
    summonerId: str
    summonerLevel: int
    summonerName: str
    teamEarlySurrendered: bool
    teamId: int
    teamPosition: str = Field(
        ...,
        description='Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.',
    )
    timeCCingOthers: int
    timePlayed: int
    totalAllyJungleMinionsKilled: Optional[int] = None
    totalDamageDealt: int
    totalDamageDealtToChampions: int
    totalDamageShieldedOnTeammates: int
    totalDamageTaken: int
    totalEnemyJungleMinionsKilled: Optional[int] = None
    totalHeal: int = Field(
        ...,
        description='Whenever positive health is applied (which translates to all heals in the game but not things like regeneration), totalHeal is incremented by the amount of health received. This includes healing enemies, jungle monsters, yourself, etc',
    )
    totalHealsOnTeammates: int = Field(
        ...,
        description='Whenever positive health is applied (which translates to all heals in the game but not things like regeneration), totalHealsOnTeammates is incremented by the amount of health received.  This is post modified, so if you heal someone missing 5 health for 100 you will get +5 totalHealsOnTeammates',
    )
    totalMinionsKilled: int = Field(
        ...,
        description='totalMillionsKilled = mMinionsKilled, which is only incremented on kills of kTeamMinion, kMeleeLaneMinion, kSuperLaneMinion, kRangedLaneMinion and kSiegeLaneMinion',
    )
    totalTimeCCDealt: int
    totalTimeSpentDead: int
    totalUnitsHealed: int
    tripleKills: int
    trueDamageDealt: int
    trueDamageDealtToChampions: int
    trueDamageTaken: int
    turretKills: int
    turretTakedowns: Optional[int] = None
    turretsLost: Optional[int] = None
    unrealKills: int
    visionScore: int
    visionClearedPings: Optional[int] = None
    visionWardsBoughtInGame: int
    wardsKilled: int
    wardsPlaced: int
    win: bool
    baitPings: Optional[int] = None
    dangerPings: Optional[int] = Field(
        None, description='https://github.com/RiotGames/developer-relations/issues/870'
    )
    basicPings: Optional[int] = Field(
        None, description='https://github.com/RiotGames/developer-relations/issues/814'
    )
    playerAugment5: Optional[int] = None
    playerAugment6: Optional[int] = None
    riotIdName: Optional[str] = Field(
        None,
        description='Deprecated, use `riotIdGameName`. This field name was briefly used instead of `riotIdGameName`, prior to patch 14.5.',
    )
    retreatPings: Optional[int] = Field(
        None, description='https://github.com/RiotGames/developer-relations/issues/814'
    )
    championSkinId: Optional[int] = None


class InfoTimeLineDto(BaseModel):
    endOfGameResult: Optional[str] = Field(
        None, description='Refer to indicate if the game ended in termination.'
    )
    frameInterval: int
    gameId: Optional[int] = None
    participants: Optional[List[ParticipantTimeLineDto]] = None
    frames: List[FramesTimeLineDto]


class InfoDto(BaseModel):
    endOfGameResult: Optional[str] = Field(
        None, description='Refer to indicate if the game ended in termination.'
    )
    gameCreation: int = Field(
        ...,
        description='Unix timestamp for when the game is created on the game server (i.e., the loading screen).',
    )
    gameDuration: int = Field(
        ...,
        description="Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.",
    )
    gameEndTimestamp: Optional[int] = Field(
        None,
        description='Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.',
    )
    gameId: int
    gameMode: str = Field(..., description='Refer to the Game Constants documentation.')
    gameName: str
    gameStartTimestamp: int = Field(
        ..., description='Unix timestamp for when match starts on the game server.'
    )
    gameType: str
    gameVersion: str = Field(
        ...,
        description='The first two parts can be used to determine the patch a game was played on.',
    )
    mapId: int = Field(..., description='Refer to the Game Constants documentation.')
    participants: List[ParticipantDto]
    platformId: str = Field(..., description='Platform where the match was played.')
    queueId: int = Field(..., description='Refer to the Game Constants documentation.')
    teams: List[TeamDto]
    tournamentCode: Optional[str] = Field(
        None,
        description='Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.',
    )
    gameModeMutators: Optional[List[str]] = None


class TimelineDto(BaseModel):
    metadata: MetadataTimeLineDto = Field(..., description='Match metadata.')
    info: InfoTimeLineDto = Field(..., description='Match info.')


class MatchDto(BaseModel):
    metadata: MetadataDto = Field(..., description='Match metadata.')
    info: InfoDto = Field(..., description='Match info.')
